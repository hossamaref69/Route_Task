// Generated by Dagger (https://dagger.dev).
package com.example.routetask.ui;

import com.example.domain.usecase.GetProductUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ProductViewModel_Factory implements Factory<ProductViewModel> {
  private final Provider<GetProductUseCase> getProductUseCaseProvider;

  public ProductViewModel_Factory(Provider<GetProductUseCase> getProductUseCaseProvider) {
    this.getProductUseCaseProvider = getProductUseCaseProvider;
  }

  @Override
  public ProductViewModel get() {
    return newInstance(getProductUseCaseProvider.get());
  }

  public static ProductViewModel_Factory create(
      Provider<GetProductUseCase> getProductUseCaseProvider) {
    return new ProductViewModel_Factory(getProductUseCaseProvider);
  }

  public static ProductViewModel newInstance(GetProductUseCase getProductUseCase) {
    return new ProductViewModel(getProductUseCase);
  }
}
